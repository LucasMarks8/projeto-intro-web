// Pense em alguma coisa do cotidiano que seja cont√°vel e estruturada. Por enquanto, vamos chamar esta coisa de item.
// Com esse item, n√≥s vamos construir nossas l√≥gicas e evoluir no projeto atrav√©s das semanas. 
// Pode ser qualquer coisa que possa ser descrita com caracter√≠sticas escritas. Alguns exemplos abaixo:

// 1. Para o item que voc√™ decidiu, pense nas caracter√≠sticas que s√£o importantes para constru√≠-lo. 
// Vamos usar estas caracter√≠sticas para definir exemplos destes objetos usando o c√≥digo.
// Voc√™ precisar√° criar pelo menos:
//   * uma caracter√≠stica String;
//   * uma caracter√≠stica Number;
//   * uma caracter√≠stica Boolean;
// Exemplos abaixo
// const nome; //string
// const idade; //number 
// const verificouEmail; //boolean 
// Recomendamos, pensando no futuro, que voc√™ tamb√©m pense em dados que podem receber m√∫ltiplos valores de uma s√≥ vez.
// N√£o vamos usar estes dados at√© mais pra frente, mas √© legal j√° ter uma ideia.

// 2. Agora, crie tr√™s conjuntos de vari√°veis utilizando as caracter√≠sticas que voc√™ definiu acima. 
// Lembre-se que deve ser o mesmo tipo de item, com tr√™s conjuntos de dados diferentes.
// Exemplo:
// const nome1 = "Fulano";
// const idade1 = 33;
// const verificouEmail1 = false;

// const nome2 = "Sicrano";
// const idade2 = 41;
// const verificouEmail2 = true;

// const nome3 = "Beltrano";
// const idade3 = 27;
// const verificouEmail3 = true;

const nome1 = "Banana"
const preco1 = 3.70;
const disponivelEmEstoque1 = true;
const nome2 = "melancia";
const preco2 = 4.00;
const disponivelEmEstoque2 = false;
const nome3 = "mel√£o";
const preco3 = 6.00;
const disponivelEmEstoque3 = true;

// 3. Fa√ßa um c√°lculo de m√©dia, entre os valores num√©ricos respectivos de cada item. 
// Imprima o valor da m√©dia utilizando um console.log. Guarde este valor em uma const;
// üí°A m√©dia deve ser igual √† soma dos itens, dividida pelo total de itens.

const precoMedio = (preco1 + preco2 + preco3)/3;
console.log(`O pre√ßo m√©dio √©: ${precoMedio.toFixed(2)}`);

// 4. Com um console.log, imprima o resultado de uma opera√ß√£o l√≥gica que checa se todos os valores de vari√°veis
// booleanas criadas at√© aqui s√£o verdadeiras.
// üí° Exemplo
// const verificaEmails = verificouEmail1 && verificouEmail2 && verificouEmail3;
// console.log(verificaEmails);
// // nesse caso, vai imprimir false, pois verificouEmail1 === false

const temNoEstoque = disponivelEmEstoque1 && disponivelEmEstoque2 && disponivelEmEstoque3;
console.log(`A verifica√ß√£o √©: ${temNoEstoque}`);

// 5. Crie pelo menos mais uma caracter√≠stica para o item que voc√™ criou. Esta caracter√≠stica deve ser um array. 
// Mantenha o tipo de dado do array criado sempre o mesmo, isto √©, se √© um array de strings, s√≥ deve receber strings.
// const nome; //string
// const idade; //number
// const verificouEmail; //boolean
// const projetos; //array de strings

const arrayreceitas1 = ["sorvete", " bolo", " panqueca", " pudim"]
const arrayreceitas2 = ["mojito", " caipirinha", " batida", " margarita"]
const arrayreceitas3 = ["sopa", " sorvete", " smoothie", " picol√©"]

// 6. Exiba um relat√≥rio utilizando console.log(), mostrando todos os dados de cada um dos itens criados at√© aqui
//   1. O log deve exibir o dado de nome, t√≠tulo ou afim sempre em LETRAS MAI√öSCULAS, como no exemplo abaixo.
// FULANO
// idade: 33
// verificou email?: false
// projetos: ["Projeto de HTML", "Projeto de CSS", "Projeto React"]

console.log(`
    ${nome1.toUpperCase()}
    Pre√ßo em S√£o Paulo: ${preco1} reais o kg
    √â a mais consumida no Brasil? ${disponivelEmEstoque1}
    Poss√≠veis receitas: ${arrayreceitas1}
`)

console.log(`
    ${nome2.toUpperCase()}
    Pre√ßo em S√£o Paulo: ${preco2} reais o kg
    Est√° dispon√≠vel em estoque? ${disponivelEmEstoque2}
    Poss√≠veis receitas: ${arrayreceitas2}
`)
console.log(`
    ${nome3.toUpperCase()}
    Pre√ßo em S√£o Paulo: ${preco3} reais o kg
    √â a mais consumida no Brasil? ${disponivelEmEstoque3}
    Poss√≠veis receitas: ${arrayreceitas3}
`)
